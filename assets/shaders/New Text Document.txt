void trns(out vec2 vo, float rotation){
    vec2 v = vec2(vo);
    rotation = radians(rotation);
    
    float sine = sin(rotation), cosin = cos(rotation);
    vo = vec2(
            v.x * cosin - v.y * sine,
            v.x * sine + v.y * cosin
            );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    float scale = abs(sin(iTime * 2.0) * sin(iTime/3.0));
    
    vec2 scaling = vec2(0, scale);
    trns(scaling, iTime);
    if(scale < 0.95) scaling = vec2(0, 0);
    
    vec2 warpedUv = vec2(uv.x + sin(uv.y * 16.0)/5.0 * scaling.x, uv.y + sin(uv.y * 16.0)/5.0  * scaling.y);
    float cellSize = 5.0;
    
    vec2 pixelSize = vec2(0.03, 0.03);
    
    vec2 fixedUV = warpedUv+pixelSize/2.0;
    
    vec2 pxUV = floor(fixedUV/pixelSize)*pixelSize;
    
    vec4 tex = texture(iChannel0, vec2(fract(pxUV.x), fract(pxUV.y)));

    // Time varying pixel color
    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(tex);
}